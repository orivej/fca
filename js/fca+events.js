// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var module;

  module = this.fca;

  _.extend(module, Backbone.Events, {
    explore: function(e, m, i, options) {
      var a, ajj, e1, l;
      if (options == null) {
        options = {};
      }
      "E ⊆ M; I is E → M Initially E is NIL. Change E. Return values: implications L, examples E";
      _.defaults(options, {
        confirm: _.bind(confirm, window),
        prompt: _.bind(prompt, window),
        parse: function(x) {
          return x;
        },
        confirmationMessage: function(from, to) {
          if (from.length) {
            return "If something is " + from + ", is it " + to + "?";
          } else {
            return "Is everything " + to + "?";
          }
        },
        counterexampleMessage: 'Counterexample:'
      });
      l = [];
      a = [];
      while (a) {
        while (true) {
          ajj = this.mClosure(a, m, e, i);
          if (_.isEqual(_.object(a, a), _.object(ajj, ajj))) {
            break;
          }
          ajj = _.difference(ajj, a);
          if (options.confirm(options.confirmationMessage(a, ajj))) {
            l.push([a, ajj]);
            module.trigger('add-rule', a, ajj);
            break;
          } else {
            e1 = options.prompt(options.counterexampleMessage);
            if (!e1) {
              module.trigger('abort');
              return;
            }
            e1 = options.parse(e1);
            e.push(e1);
            module.trigger('add-example', e1);
          }
        }
        a = this.nextClosure(a, m, this.ruleBasedClosure(l));
      }
      return [l, e];
    }
  });

}).call(this);
