// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var module, __iced_k, __iced_k_noop,
    __slice = [].slice;

  __iced_k = __iced_k_noop = function() {};

  module = this.fca = _.extend({}, Backbone.Events, {
    phiMapping: function(g, m, i) {
      "All M1 from full set M that satisfy I for all G1";
      return _.filter(m, function(m1) {
        return _.every(g, function(g1) {
          return i(g1, m1);
        });
      });
    },
    psiMapping: function(m, g, i) {
      "All G1 from full set G that satisfy I for all M1";
      return this.phiMapping(m, g, function(m1, g1) {
        return i(g1, m1);
      });
    },
    gClosure: function(a, g, m, i) {
      "Closure from A ⊆ G onto G";
      return this.psiMapping(this.phiMapping(a, m, i), g, i);
    },
    mClosure: function(b, m, g, i) {
      "Closure from B ⊆ M onto M";
      return this.phiMapping(this.psiMapping(b, g, i), m, i);
    },
    nextClosure$: function(a, m, l) {
      "Next closed set of closure L on A ⊆ M. Mutates A.";
      var aCopy, b, i, j, m1, mr, _i, _len;
      mr = m;
      for (i = _i = 0, _len = m.length; _i < _len; i = ++_i) {
        m1 = m[i];
        mr = _.rest(mr);
        j = a.indexOf(m1);
        if (j > -1) {
          a.splice(j, 1);
        } else {
          aCopy = a.slice();
          aCopy.push(m1);
          b = l(aCopy);
          if ((_.intersection(mr, _.difference(b, a))).length === 0) {
            return b;
          }
        }
      }
      return null;
    },
    confirmationMessage: function(from, to) {
      if (from.length) {
        return "If something is " + from + ", is it " + to + "?";
      } else {
        return "Is everything " + to + "?";
      }
    },
    ruleBasedClosure: function(rules) {
      return function(b) {
        var changed, p, q, _i, _len, _ref;
        changed = true;
        while (changed) {
          changed = false;
          for (_i = 0, _len = rules.length; _i < _len; _i++) {
            _ref = rules[_i], p = _ref[0], q = _ref[1];
            if (_.difference(p, b).length === 0 && _.difference(q, b).length !== 0) {
              b = _.union(b, q);
              changed = true;
            }
          }
        }
        return b;
      };
    },
    cps: function(fun) {
      return function() {
        var args, cb, _i;
        args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
        return cb(fun.apply(null, args));
      };
    },
    explore: function(e, m, i, options) {
      var a, ajj, confirmed, e1, l, mod, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      "E ⊆ M; I is E → M Initially E is NIL. Change E. Return values: implications L, (E, M, I)";
      mod = this;
      _.extend(options, {
        confirm: module.cps(_.bind(confirm, window)),
        prompt: module.cps(_.bind(prompt, window)),
        parse: function(x) {
          return x;
        }
      });
      l = [];
      a = [];
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!a) {
              return _break();
            } else {
              (function(__iced_k) {
                var _results1, _while;
                _results1 = [];
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = function() {
                    return __iced_k(_results1);
                  };
                  _continue = function() {
                    return iced.trampoline(function() {
                      return _while(__iced_k);
                    });
                  };
                  _next = function(__iced_next_arg) {
                    _results1.push(__iced_next_arg);
                    return _continue();
                  };
                  if (!true) {
                    return _break();
                  } else {
                    ajj = _this.mClosure(a, m, e, i);
                    (function(__iced_k) {
                      if (_.isEqual(_.object(a, a), _.object(ajj, ajj))) {
                        (function(__iced_k) {
_break()
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(function() {
                      ajj = _.difference(ajj, a);
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/home/uj/coding/lisp/fca/js/fca.coffee"
                        });
                        options.confirm(_this.confirmationMessage(a, ajj), __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return confirmed = arguments[0];
                            };
                          })(),
                          lineno: 83
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          if (confirmed) {
                            l.push([a, ajj]);
                            module.trigger('add-rule', a, ajj);
                            (function(__iced_k) {
_break()
                            })(__iced_k);
                          } else {
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "/home/uj/coding/lisp/fca/js/fca.coffee"
                              });
                              options.prompt("Counterexample:", __iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    return e1 = arguments[0];
                                  };
                                })(),
                                lineno: 89
                              }));
                              __iced_deferrals._fulfill();
                            })(function() {
                              e1 = options.parse(e1);
                              e.push(e1);
                              return __iced_k(module.trigger('add-example', e1));
                            });
                          }
                        })(_next);
                      });
                    });
                  }
                };
                _while(__iced_k);
              })(function() {
                return _next(a = _this.nextClosure$(a, m, _this.ruleBasedClosure(l)));
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return l;
        };
      })(this));
    }
  });

}).call(this);
