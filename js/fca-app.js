// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var App, AttributesForm, ExampleAdd, ExampleRow, ExamplesHeading, ExamplesTable, R, RC, RulesList, br, button, caption, div, form, hideIf, icon, input, label, li, manualRelation, negateAttributes, p, small, span, table, tbody, td, th, thead, tr, ul, _ref;

  R = React;

  RC = R.createClass;

  _ref = R.DOM, div = _ref.div, ul = _ref.ul, li = _ref.li, p = _ref.p, span = _ref.span, small = _ref.small, br = _ref.br, table = _ref.table, caption = _ref.caption, thead = _ref.thead, tbody = _ref.tbody, tr = _ref.tr, th = _ref.th, td = _ref.td, form = _ref.form, label = _ref.label, input = _ref.input, button = _ref.button;

  negateAttributes = function(attributes) {
    return attributes.concat(attributes.map(function(attr) {
      return "не " + attr;
    }));
  };

  icon = function(className) {
    return R.DOM.i({
      className: 'icon ' + className
    });
  };

  AttributesForm = RC({
    render: function() {
      return form({
        onSubmit: this.props.onSubmit
      }, [
        label({}, 'Перечислите свойства через "|": '), input({
          ref: 'input',
          onChange: this.onChange,
          style: {
            width: '70%'
          },
          autoFocus: true,
          type: 'search'
        })
      ]);
    },
    onChange: function(e) {
      return this.props.onAttributesChange(e.target.value);
    },
    focus: function() {
      return this.refs['input'].getDOMNode().focus();
    }
  });

  ExamplesHeading = RC({
    render: function() {
      var cells;
      cells = this.props.attributes.map(function(attr) {
        return th({}, attr);
      });
      return tr({}, th({
        contentEditable: true
      }, 'Пример'), cells);
    }
  });

  ExampleRow = RC({
    render: function() {
      var cells;
      cells = this.props.example.vals.map((function(_this) {
        return function(val, i) {
          return td({}, input({
            ref: i,
            onChange: _this.onChange,
            type: 'checkbox',
            checked: val
          }));
        };
      })(this));
      return tr({}, [
        td({
          ref: 'name',
          onBlur: this.onChange,
          contentEditable: true,
          spellCheck: false
        }, this.props.example.name), cells, td({}, button({
          onClick: this.onDelete,
          title: 'Удалить'
        }, '−'))
      ]);
    },
    onChange: function(e) {
      var i;
      return this.props.onChangeExample({
        name: this.refs['name'].getDOMNode().textContent,
        vals: (function() {
          var _i, _ref1, _results;
          _results = [];
          for (i = _i = 0, _ref1 = this.props.example.vals.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
            _results.push(this.refs[i].getDOMNode().checked);
          }
          return _results;
        }).call(this)
      }, this.props.index);
    },
    onDelete: function(e) {
      return this.props.onDeleteExample(this.props.index);
    }
  });

  ExampleAdd = RC({
    render: function() {
      var cells;
      cells = _(this.props.length).times((function(_this) {
        return function(i) {
          return td({}, input({
            ref: i,
            type: 'checkbox',
            onKeyUp: _this.checkboxKeyUp
          }));
        };
      })(this));
      return tr({
        onKeyPress: this.keyPress,
        onKeyUp: this.keyUp
      }, [
        td({}, input({
          ref: 'name'
        })), cells, td({}, button({
          onClick: this.add,
          title: 'Добавить'
        }, '+'))
      ]);
    },
    focus: function() {
      var i, _i, _ref1;
      for (i = _i = 0, _ref1 = this.props.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        this.refs[i].getDOMNode().checked = false;
      }
      this.refs['name'].getDOMNode().value = '';
      return this.refs['name'].getDOMNode().focus();
    },
    keyPress: function(e) {
      if (e.keyCode === 13) {
        this.add();
        return e.preventDefault();
      }
    },
    keyUp: function(e) {
      if (e.keyCode === 27) {
        return this.props.onCancel();
      }
    },
    checkboxKeyUp: function(e) {
      var i, node, _ref1;
      if ((48 <= (_ref1 = e.keyCode) && _ref1 <= 57)) {
        i = (e.keyCode + 1) % 10;
        node = this.refs[i].getDOMNode();
        return node.checked = !node.checked;
      }
    },
    add: function() {
      var i;
      this.props.onUpsertExample({
        name: this.refs['name'].getDOMNode().value,
        vals: (function() {
          var _i, _ref1, _results;
          _results = [];
          for (i = _i = 0, _ref1 = this.props.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
            _results.push(this.refs[i].getDOMNode().checked);
          }
          return _results;
        }).call(this)
      });
      return this.focus();
    }
  });

  hideIf = function(cond, props) {
    if (cond) {
      if (props == null) {
        props = {};
      }
      if (props.style == null) {
        props.style = {};
      }
      props.style.display = 'none';
    }
    return props;
  };

  ExamplesTable = RC({
    render: function() {
      var rows;
      rows = this.props.examples.map((function(_this) {
        return function(example, i) {
          return ExampleRow({
            onChangeExample: _this.props.onUpsertExample,
            onDeleteExample: _this.props.onDeleteExample,
            example: example,
            index: i
          });
        };
      })(this));
      return div(hideIf(!this.props.attributes.length), [
        p({}, ['Добавляйте примеры, пока все выводы не будут истинны.', br({}), small({}, 'Предпосылка: все заключения от наличия одного набора свойств к наличию другого истинны, если не показано обратное.')]), table({}, [
          thead({}, ExamplesHeading({
            attributes: this.props.attributes
          })), tbody({}, [
            rows, ExampleAdd({
              ref: 'exampleAdd',
              onUpsertExample: this.props.onUpsertExample,
              onCancel: this.props.onCancel,
              length: this.props.attributes.length
            })
          ])
        ])
      ]);
    },
    focusAddExample: function() {
      return this.refs.exampleAdd.focus();
    }
  });

  RulesList = RC({
    render: function() {
      var addRule, attrText, attributes, confirmedRuleKeys, curRuleKeys, describeRule, items, lostRuleKeys, option;
      curRuleKeys = this.props.rules.map(function(rule) {
        return JSON.stringify(rule);
      });
      lostRuleKeys = _.difference(_.keys(this.model.confirmedRules), curRuleKeys);
      attributes = negateAttributes(this.props.attributes);
      attrText = function(attrs) {
        return attrs.map(function(attr) {
          return attributes[attr];
        }).join(', ');
      };
      describeRule = function(_arg) {
        var from, to;
        from = _arg[0], to = _arg[1];
        if (from.length) {
          return "если " + (attrText(from)) + ", то " + (attrText(to));
        } else {
          return "всегда " + (attrText(to));
        }
      };
      items = [];
      addRule = (function(_this) {
        return function(key, rule, className) {
          var boundary, cells, from, ruleNode, to;
          ruleNode = span({
            className: className + ' rule',
            onClick: function() {
              return _this.toggleConfirmed(key, rule);
            }
          }, icon(className), describeRule(rule));
          if (!_this.state.tableView) {
            return items.push(li({}, ruleNode));
          } else {
            boundary = _this.props.attributes.length;
            cells = _.map(_.range(boundary), function() {
              return [];
            });
            from = rule[0], to = rule[1];
            _.each(from, function(i) {
              return cells[i % boundary].push(input({
                type: 'checkbox',
                checked: i < boundary
              }));
            });
            _.each(to, function(i) {
              return cells[i % boundary].push(icon(i < boundary ? 'true' : 'false'));
            });
            return items.push(tr({}, [
              cells.map(function(cell) {
                return td({}, cell);
              }), td({}, ruleNode)
            ]));
          }
        };
      })(this);
      _.each(lostRuleKeys, (function(_this) {
        return function(key) {
          var rule;
          rule = _this.model.confirmedRules[key];
          return addRule(key, rule, 'lost');
        };
      })(this));
      confirmedRuleKeys = [];
      _.each(this.props.rules, (function(_this) {
        return function(rule, i) {
          var confirmed, key;
          key = curRuleKeys[i];
          confirmed = _.has(_this.model.confirmedRules, key);
          if (confirmed && _this.state.confirmedBelow) {
            return confirmedRuleKeys.push([key]);
          } else {
            return addRule(key, rule, confirmed ? 'confirmed' : 'unconfirmed');
          }
        };
      })(this));
      _.each(confirmedRuleKeys, (function(_this) {
        return function(key) {
          var rule;
          rule = _this.model.confirmedRules[key];
          return addRule(key, rule, 'confirmed');
        };
      })(this));
      option = function(text, checked, onChange) {
        return label({
          className: 'small'
        }, input({
          type: 'checkbox',
          checked: checked,
          onChange: onChange
        }), text);
      };
      return div(hideIf(!this.props.attributes.length), [
        p({
          className: 'autocol'
        }, ['Выводы ', br({}), small({}, 'из предпосылки, ограниченной примерами')]), p({
          className: 'autocol'
        }, [
          option('показывать выводы в виде таблицы', this.state.tableView, (function(_this) {
            return function(e) {
              return _this.setState({
                tableView: e.target.checked
              });
            };
          })(this)), br({}), option('показывать подтверждённые выводы в конце', this.state.confirmedBelow, (function(_this) {
            return function(e) {
              return _this.setState({
                confirmedBelow: e.target.checked
              });
            };
          })(this))
        ]), p({
          className: 'autocol'
        }, [option('делать выводы из отсутсвия свойств', this.props.autoNegate.get(), this.props.autoNegate.set)]), items.length ? this.state.tableView ? table({
          className: 'rules'
        }, [
          thead({}, tr({}, [
            this.props.attributes.map(function(attr) {
              return th({}, attr);
            }), th({})
          ])), tbody({}, items)
        ]) : ul({
          className: 'rules'
        }, items) : p({
          style: {
            'font-style': 'italic'
          }
        }, ['Больше ничего вывести нельзя.'])
      ]);
    },
    getInitialModel: function() {
      return this.model = {
        confirmedRules: {}
      };
    },
    getInitialState: function() {
      return _.extend({
        tableView: false,
        confirmedBelow: false
      }, this.getInitialModel());
    },
    reset: function() {
      return this.setState(this.getInitialModel());
    },
    toggleConfirmed: function(key, rule) {
      if (_.has(this.model.confirmedRules, key)) {
        delete this.model.confirmedRules[key];
      } else {
        this.model.confirmedRules[key] = rule;
      }
      return this.setState(this.model);
    }
  });

  manualRelation = function() {
    var cache;
    cache = {};
    return function(g1, m1) {
      var rel;
      cache[g1] = cache[g1] || {};
      rel = cache[g1][m1];
      if (rel != null) {
        return rel;
      } else {
        return cache[g1][m1] = confirm("" + g1 + " — " + m1 + "?");
      }
    };
  };

  App = RC({
    render: function() {
      return div({}, AttributesForm({
        ref: 'attributesForm',
        onAttributesChange: this.attributesChanged,
        onSubmit: this.focusAddExample
      }), ExamplesTable({
        ref: 'examplesTable',
        onUpsertExample: this.onUpsertExample,
        onDeleteExample: this.onDeleteExample,
        onCancel: this.focusAttributesForm,
        attributes: this.state.attributes,
        examples: this.state.examples
      }), RulesList({
        ref: 'rulesList',
        attributes: this.state.attributes,
        rules: this.state.rules,
        autoNegate: {
          get: (function(_this) {
            return function() {
              return _this.state.autoNegate;
            };
          })(this),
          set: (function(_this) {
            return function(e) {
              _this.model.autoNegate = e.target.checked;
              _this.setState(_this.model);
              return _this.autoexplore();
            };
          })(this)
        }
      }));
    },
    getInitialState: function() {
      this.model = {
        attributes: [],
        examples: [],
        autoNegate: false
      };
      return _.extend({
        rules: []
      }, this.model);
    },
    attributesChanged: function(attributes) {
      var cur, next;
      cur = this.model.attributes;
      next = _.chain(attributes.split('|')).map(function(s) {
        return s.trim();
      }).without('').uniq().value();
      if (!_.isEqual(cur, next)) {
        this.model.attributes = next;
        if (cur.length !== next.length) {
          this.model.examples = [];
          this.refs['rulesList'].reset();
        }
        this.setState(this.model);
        return this.autoexplore();
      }
    },
    focusAddExample: function() {
      this.refs['examplesTable'].focusAddExample();
      return false;
    },
    focusAttributesForm: function() {
      return this.refs['attributesForm'].focus();
    },
    onUpsertExample: function(example, index) {
      if (index != null) {
        _.extend(this.model.examples[index], example);
      } else {
        this.model.examples.push(example);
      }
      this.setState(this.model);
      return this.autoexplore();
    },
    onDeleteExample: function(index) {
      this.model.examples.splice(index, 1);
      this.setState(this.model);
      return this.autoexplore();
    },
    autoexplore: function() {
      var attributes, boundary, rules;
      if (this.model.autoNegate) {
        attributes = negateAttributes(this.model.attributes);
        boundary = this.model.attributes.length;
        rules = fca.autoexplore(this.model.examples, _.range(attributes.length), function(g, m) {
          return g.vals[m % boundary] ^ (m >= boundary);
        });
        rules = _.filter(rules, function(_arg) {
          var from, to;
          from = _arg[0], to = _arg[1];
          return !_.intersection(from, _.map(from, function(i) {
            return i - boundary;
          })).length;
        });
      } else {
        rules = fca.autoexplore(this.model.examples, _.range(this.model.attributes.length), function(g, m) {
          return g.vals[m];
        });
      }
      return this.setState({
        rules: rules
      });
    }
  });

  R.renderComponent(App(), document.body);

}).call(this);
