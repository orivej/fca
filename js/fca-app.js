// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var App, AttributesForm, B, ExamplesHeading, ExamplesRow, ExamplesTable, LinkedState, R, RC, RulesList, button, caption, delay, div, form, hideIf, input, label, li, manualRelation, p, table, td, th, tr, ul, _ref;

  B = Backbone;

  R = React;

  RC = R.createClass;

  LinkedState = R.addons.LinkedStateMixin;

  _ref = R.DOM, div = _ref.div, ul = _ref.ul, li = _ref.li, p = _ref.p, table = _ref.table, caption = _ref.caption, tr = _ref.tr, th = _ref.th, td = _ref.td, form = _ref.form, label = _ref.label, input = _ref.input, button = _ref.button;

  delay = function(ms, callback) {
    return setTimeout(callback, ms);
  };

  AttributesForm = RC({
    render: function() {
      return form({
        onSubmit: this.explore
      }, [
        label({}, 'Перечислите свойства через "|": '), input({
          onChange: this.onChange,
          style: {
            width: '50%'
          },
          autoFocus: true
        }), button({}, 'Исследовать')
      ]);
    },
    explore: function() {
      this.props.onExplore();
      return false;
    },
    onChange: function(e) {
      return this.props.onAttributesChange(e.target.value);
    }
  });

  ExamplesHeading = RC({
    render: function() {
      var cells;
      cells = this.props.attributes.map(function(attr) {
        return th({}, attr);
      });
      return tr({}, th({}, ' '), cells);
    }
  });

  ExamplesRow = RC({
    render: function() {
      var cells;
      cells = this.props.values.map(function(val) {
        return td({}, val);
      });
      return tr({}, cells);
    }
  });

  hideIf = function(cond, props) {
    if (cond) {
      if (props == null) {
        props = {};
      }
      if (props.style == null) {
        props.style = {};
      }
      props.style.display = 'none';
    }
    return props;
  };

  ExamplesTable = RC({
    render: function() {
      var rows;
      rows = this.props.examples.map(function(example) {
        return ExamplesRow({
          values: example
        });
      });
      return table(hideIf(!this.props.attributes.length), [
        caption({}, 'Примеры'), ExamplesHeading({
          attributes: this.props.attributes
        }), rows
      ]);
    }
  });

  RulesList = RC({
    render: function() {
      var items;
      items = this.props.rules.map(function(_arg) {
        var from, to;
        from = _arg[0], to = _arg[1];
        return li({}, from.length ? "Если " + from + ", то " + to : "Всегда " + to);
      });
      return div(hideIf(!items.length), [p({}, 'Правила'), ul({}, items)]);
    }
  });

  manualRelation = function() {
    var cache;
    cache = {};
    return function(g1, m1) {
      var rel;
      cache[g1] = cache[g1] || {};
      rel = cache[g1][m1];
      if (rel != null) {
        return rel;
      } else {
        return cache[g1][m1] = confirm("" + g1 + " — " + m1 + "?");
      }
    };
  };

  App = RC({
    render: function() {
      return div({}, [
        AttributesForm({
          onAttributesChange: this.attributesChanged,
          onExplore: this.explore
        }), ExamplesTable({
          attributes: this.state.attributes,
          examples: this.state.examples
        }), RulesList({
          rules: this.state.rules
        })
      ]);
    },
    getInitialState: function() {
      return _.clone(this.model = {
        attributes: [],
        examples: [],
        rules: []
      });
    },
    reset: function() {
      this.model.examples = [];
      this.model.rules = [];
      return this.setState(this.model);
    },
    attributesChanged: function(attributes) {
      var cur, next;
      cur = this.model.attributes;
      next = _.chain(attributes.split('|')).map(function(s) {
        return s.trim();
      }).without('').uniq().value();
      if (!_.isEqual(cur, next)) {
        this.model.attributes = next;
        return this.reset();
      }
    },
    explore: function() {
      var relation;
      relation = manualRelation();
      fca.off('add-example').on('add-example', (function(_this) {
        return function(g1) {
          _this.model.examples.push([g1].concat(_this.state.attributes.map(function(m1) {
            if (relation(g1, m1)) {
              return '✓';
            } else {
              return '';
            }
          })));
          return _this.setState(_this.model);
        };
      })(this));
      fca.off('add-rule').on('add-rule', (function(_this) {
        return function(from, to) {
          _this.model.rules.push([from, to]);
          return _this.setState(_this.model);
        };
      })(this));
      fca.off('abort').on('abort', (function(_this) {
        return function() {
          return _this.reset();
        };
      })(this));
      this.reset();
      return delay(0, (function(_this) {
        return function() {
          return fca.explore([], _this.state.attributes, relation, {
            confirmationMessage: function(from, to) {
              if (from.length) {
                return "Если " + from + ", то " + to + "?";
              } else {
                return "Всегда ли " + to + "?";
              }
            },
            counterexampleMessage: 'Контрпример:'
          });
        };
      })(this));
    }
  });

  R.renderComponent(App(), document.body);

}).call(this);
