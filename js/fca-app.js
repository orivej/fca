// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var App, AttributesForm, B, ExampleAdd, ExampleRow, ExamplesHeading, ExamplesTable, LinkedState, R, RC, RulesList, button, caption, delay, div, form, hideIf, input, label, li, manualRelation, p, table, tbody, td, th, thead, tr, ul, _ref;

  B = Backbone;

  R = React;

  RC = R.createClass;

  LinkedState = R.addons.LinkedStateMixin;

  _ref = R.DOM, div = _ref.div, ul = _ref.ul, li = _ref.li, p = _ref.p, table = _ref.table, caption = _ref.caption, thead = _ref.thead, tbody = _ref.tbody, tr = _ref.tr, th = _ref.th, td = _ref.td, form = _ref.form, label = _ref.label, input = _ref.input, button = _ref.button;

  delay = function(ms, callback) {
    return setTimeout(callback, ms);
  };

  AttributesForm = RC({
    render: function() {
      return form({
        onSubmit: this.props.onSubmit
      }, [
        label({}, 'Перечислите свойства через "|": '), input({
          ref: 'input',
          onChange: this.onChange,
          style: {
            width: '70%'
          },
          autoFocus: true
        })
      ]);
    },
    onChange: function(e) {
      return this.props.onAttributesChange(e.target.value);
    },
    focus: function() {
      return this.refs['input'].getDOMNode().focus();
    }
  });

  ExamplesHeading = RC({
    render: function() {
      var cells;
      cells = this.props.attributes.map(function(attr) {
        return th({}, attr);
      });
      return tr({}, th({}, ' '), cells);
    }
  });

  ExampleRow = RC({
    render: function() {
      var cells;
      cells = this.props.example.vals.map(function(val) {
        return td({}, input({
          type: 'checkbox',
          disabled: true,
          checked: val
        }));
      });
      return tr({}, [td({}, this.props.example.name), cells]);
    }
  });

  ExampleAdd = RC({
    render: function() {
      var cells;
      cells = _(this.props.length).times(function(i) {
        return td({}, input({
          type: 'checkbox',
          ref: i
        }));
      });
      return tr({
        onKeyPress: this.keyPress,
        onKeyUp: this.keyUp
      }, [
        td({}, input({
          ref: 'name'
        })), cells, td({}, button({
          onClick: this.add
        }, 'Добавить'))
      ]);
    },
    focus: function() {
      var i, _i, _ref1;
      for (i = _i = 0, _ref1 = this.props.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        this.refs[i].getDOMNode().checked = false;
      }
      this.refs['name'].getDOMNode().value = '';
      return this.refs['name'].getDOMNode().focus();
    },
    keyPress: function(e) {
      if (e.keyCode === 13) {
        return this.add();
      }
    },
    keyUp: function(e) {
      if (e.keyCode === 27) {
        return this.props.onCancel();
      }
    },
    add: function() {
      var i;
      this.props.onAddExample({
        name: this.refs['name'].getDOMNode().value,
        vals: (function() {
          var _i, _ref1, _results;
          _results = [];
          for (i = _i = 0, _ref1 = this.props.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
            _results.push(this.refs[i].getDOMNode().checked);
          }
          return _results;
        }).call(this)
      });
      return this.focus();
    }
  });

  hideIf = function(cond, props) {
    if (cond) {
      if (props == null) {
        props = {};
      }
      if (props.style == null) {
        props.style = {};
      }
      props.style.display = 'none';
    }
    return props;
  };

  ExamplesTable = RC({
    render: function() {
      var rows;
      rows = this.props.examples.map(function(example) {
        return ExampleRow({
          example: example
        });
      });
      return table(hideIf(!this.props.attributes.length), [
        caption({}, 'Примеры'), thead({}, ExamplesHeading({
          attributes: this.props.attributes
        })), tbody({}, [
          rows, ExampleAdd({
            ref: 'exampleAdd',
            onAddExample: this.props.onAddExample,
            onCancel: this.props.onCancel,
            length: this.props.attributes.length
          })
        ])
      ]);
    },
    focusAddExample: function() {
      return this.refs.exampleAdd.focus();
    }
  });

  RulesList = RC({
    render: function() {
      var items;
      items = this.props.rules.map(function(_arg) {
        var from, to;
        from = _arg[0], to = _arg[1];
        return li({}, from.length ? "Если " + from + ", то " + to : "Всегда " + to);
      });
      return div(hideIf(!items.length), [p({}, 'Правила'), ul({}, items)]);
    }
  });

  manualRelation = function() {
    var cache;
    cache = {};
    return function(g1, m1) {
      var rel;
      cache[g1] = cache[g1] || {};
      rel = cache[g1][m1];
      if (rel != null) {
        return rel;
      } else {
        return cache[g1][m1] = confirm("" + g1 + " — " + m1 + "?");
      }
    };
  };

  App = RC({
    render: function() {
      return div({}, [
        AttributesForm({
          ref: 'attributesForm',
          onAttributesChange: this.attributesChanged,
          onSubmit: this.focusAddExample
        }), ExamplesTable({
          ref: 'examplesTable',
          onAddExample: this.addExample,
          onCancel: this.focusAttributesForm,
          attributes: this.state.attributes,
          examples: this.state.examples
        }), RulesList({
          rules: this.state.rules
        })
      ]);
    },
    getInitialState: function() {
      this.model = {
        attributes: [],
        examples: []
      };
      return _.extend({
        rules: []
      }, this.model);
    },
    attributesChanged: function(attributes) {
      var cur, next;
      cur = this.model.attributes;
      next = _.chain(attributes.split('|')).map(function(s) {
        return s.trim();
      }).without('').uniq().value();
      if (!_.isEqual(cur, next)) {
        this.model.attributes = next;
        this.model.examples = [];
        this.setState(this.model);
        return this.autoexplore();
      }
    },
    focusAddExample: function() {
      this.refs['examplesTable'].focusAddExample();
      return false;
    },
    focusAttributesForm: function() {
      return this.refs['attributesForm'].focus();
    },
    addExample: function(example) {
      this.model.examples.push(example);
      this.setState(this.model);
      return this.autoexplore();
    },
    autoexplore: function() {
      var attrIndices;
      attrIndices = _.invert(_.extend({}, this.model.attributes));
      return this.setState({
        rules: fca.autoexplore(this.model.examples, this.model.attributes, function(g, m) {
          return g.vals[attrIndices[m]];
        })
      });
    }
  });

  R.renderComponent(App(), document.body);

}).call(this);
